<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>benmccormick.org</title>
        <description>A blog by Ben McCormick</description>
        <link>http://benmccormick.org</link>
        <lastBuildDate>Fri, 16 Dec 2016 02:59:34 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <copyright>All rights reserved 2016, Ben McCormick</copyright>
        <generator>Feed for Node.js</generator>
        <item>
            <title><![CDATA[What are Higher Order Components?]]></title>
            <link>https://benmccormick.org/2016/12/14/what-are-higher-order-components/</link>
            <guid>https://benmccormick.org/2016/12/14/what-are-higher-order-components/</guid>
            <pubDate>Wed, 14 Dec 2016 14:30:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>If you spend much time at all reading through articles and documentation around React, you’re likely to run into the term “Higher Order component”, often abbreviated HoC.  Since it is often used without context in React discussions, and is not a particularly intuitive term for many (most?) developers, I thought it was worth publishing a quick and simple explanation of what Higher Order Components are.</p>
<p>Higher Order Components are functions that take a React Component, and return a React Component.  The “higher order” phrasing is borrowed from the term “higher order function”, a more widely used term in Mathematics and Computer Science that refers to a function that either takes one or more functions as an argument, returns a function, or does both.  Since React Components can be thought of as functions that take data and return ui elements, the naming and usage make sense.  Let’s look at an example of a higher order component.</p>
<pre><code class="language-javascript">const ExtraPropsComponent = (WrappedComponent, componentType) =&gt; {
  return class ExtraPropsChild extends React.Component {
    render() {
      let props = Object.assign({}, this.props, {
        importantFunction: () =&gt; 'foo',
        componentType,
      });
      return &lt;WrappedComponent {...props}/&gt;
    }
  }
}
</code></pre>
<p>This is a pretty basic HoC that takes a component and returns a new version of that component that will always be passed 2 extra props <code>importantFunction</code> and <code>componentType</code>. One is statically generated in this case, but the other is dynamically passed in when the component is generated.  The ability to pass dynamic content in when defining the component is one of the key wins of HoCs in the real world.  For instance, this is how Redux’s <a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options">connect</a> function works.</p>
<p>Note that this is different from a normal React Component that renders a subcomponent passed as an argument like this:</p>
<pre><code class="language-javascript">let componentType = '???';
class ExtraPropsComponent extends React.Component
  render() {
      let { ChildComponent } = this.props;
      let props = Object.assign({}, this.props, {
        importantFunction: () =&gt; 'foo',
        componentType,
      });
      delete props.ChildComponent;

      return &lt;ChildComponent {...props} /&gt;;
  }
}
</code></pre>
<p>These 2 examples are roughly equivalent for this case, but accomplish things in different ways.  The HoC is a function that takes a component and data when it is created and generates another component.  The normal component example is a component that takes a component as a property and accesses a variable that is in its scope at creation time to generate the element tree that it renders.  The HoC is more flexible as you could theoretically create multiple versions of a component using the single HoC.</p>
<pre><code class="language-javascript">
const FancyButton = ExtraPropsComponent(Button, 'fancy');
const CrazyButton = ExtraPropsComponent(Button, 'crazy');
const BoringButton = ExtraPropsComponent(Button, 'boring');
</code></pre>
<p>For the equivalent functionality without using an HoC, you would have to define the whole component for each case.</p>
<h3>Higher Order Components in the real world</h3>
<p>I’ve already mentioned connect from <a href="https://github.com/reactjs/react-redux">react-redux</a> as an example of a higher order component.  Other popular libraries that use HoC as part of their APIs include:</p>
<ul>
<li><a href="http://formidable.com/open-source/radium/">Radium</a>: a library for inline styles in React that uses a higher order component to transform in-line styles added to a component into a more robust-css like system</li>
<li><a href="https://github.com/ReactTraining/react-router">React Router</a>: a routing library for React that uses <code>withRouter</code> a HoC that injects access to the router into components that it wraps</li>
<li><a href="https://facebook.github.io/relay/">Relay</a>: Facebook’s library for connecting to GraphQL APIs includes Relay.Container, a HoC that allows developers to declare the data requirements for a component</li>
</ul>
<h3>More Resources</h3>
<ul>
<li>This was intentionally a very high level look at Higher Order Components.  If you want to go deeper, <a href="https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e#.yhbug3ohe">this medium article</a> is a great deep dive into all the use cases they allow.</li>
<li>If you’re interested in using HoCs in your own code base, <a href="https://github.com/acdlite/recompose">recompose</a> is a utility library for making the syntax around defining and using them painless</li>
</ul>
<h3>Subscribe</h3>
<p>Thanks for taking the time to read this post!  JavaScript development is one of the main topics of this blog, so if you enjoyed the post, please consider subscribing by using the <a href="http://feedpress.me/benmccormick">feed</a>, <a href="http://twitter.com/benmccormickorg">Twitter</a> or my <a href="http://eepurl.com/WFYon">mailing list</a>. You also might want to check out the my post from earlier this year on <a href="http://benmccormick.org/2016/05/02/digging-into-react-choosing-component-styles/">choosing a React component syntax</a>.</p>
]]></content:encoded>
            <author>
                <name>Ben McCormick</name>
                <email>ben@benmccormick.org</email>
                <link>http://benmccormick.org</link>
            </author>
        </item>
        <item>
            <title><![CDATA[Readable code: Know your audience ]]></title>
            <link>https://benmccormick.org/2016/12/11/readable-code-audience/</link>
            <guid>https://benmccormick.org/2016/12/11/readable-code-audience/</guid>
            <pubDate>Mon, 12 Dec 2016 04:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>A coworker asked me last week if there was a better way to write the following python code:</p>
<pre><code class="language-python">self.custom_attributes = {
  x.split(':')[0]: x.split(':')[1]
  for x in a.split(',')
}
</code></pre>
<p>I semi-jokingly replied that there were 3 better ways:</p>
<h5>For people who like comprehensions</h5>
<pre><code class="language-python">self.custom_attributes = {
  key: value
  for [key, value] in [entry.split(':') for entry in a.split(',')]
}
</code></pre>
<h5>For people who like functions</h5>
<pre><code class="language-python">def build_obj(acc, val):
   [key, value] = val.split(':')
   acc[key] = value
   return acc
self.custom_attributes = reduce(build_obj, a.split(','), {})
</code></pre>
<h4>For people who like other folks to be able to read their code</h4>
<pre><code class="language-python"># create a hash of custom attributes
self.custom_attributes = {}
# get the entries from splitting the input string
entries = a.split(',')
# for each entry split the key value pairs and add them to the hash
for entry in entries:
   [key, value] = entry.split(':')
   self.custom_attributes[key] = value
</code></pre>
<p>The joke of course is that it doesn’t really matter what the author of the code considers the best way to write it.  Like writing an essay or persuasive speech, it is much more important to consider the audience, and what style will work best for them.  Most code will eventually be read by other people, even if that is simply a future version of the original author who has been stripped of context by time [^1].</p>
<p>If my coworker is confident that his code will be read in the future by confident Python programmers who understand object comprehensions, then he could go with the first example, with its heavy use of python idioms.  If he thought it was more likely that somebody like me who is used to JavaScript idioms, he might consider the less idiomatic python from the second example that matched his teammates.  If he didn’t know who would read the code in the future, he might go with the more explicit and difficult to misinterpret version 3, and possibly tuck it away within a named function so that the main code flow could remain uninterrupted.</p>
<pre><code class="language-python">self.custom_attributes = parse_entry_string(a)

# ... elsewhere ...

def parse_entry_string (entry_string):
    attributes = {}
    # get the entries from splitting the input string
    entries = a.split(',')
    # for each entry split the key value pairs and add them to the hash
    for entry in entries:
       [key, value] = entry.split(':')[0:2]
       attributes[key] = value
    return attributes
</code></pre>
<p>Of course once the functionality is separated out into a function, it matters a lot less how it is implemented since the only time somebody will need to read it is when they are interested in that specific functionality and can invest the time to understand the code.  The well named function replaces the need for understanding everything when people browse through the code.  This is extremely important in larger code bases, since data often flows through many lines of code.  The more of it that can be usefully (and accurately) abstracted away for a reader, the easier the code base is to debug.</p>
<p>So quick tip version:</p>
<ol>
<li>Think about the audience of the code you’re writing</li>
<li>Naming functions well limits the needs to make implementation details readable for everybody. It can also make your program flow easier to follow.</li>
</ol>
<h3>Subscribe</h3>
<p>Thanks for taking the time to read this post!  Software development is one of the main topics of this blog, so if you enjoyed the post, please consider subscribing by using the <a href="http://feedpress.me/benmccormick">feed</a>, <a href="http://twitter.com/benmccormickorg">Twitter</a> or my <a href="http://eepurl.com/WFYon">mailing list</a>. You also might want to check out the my post from last year on <a href="http://benmccormick.org/2016/01/25/staying-productive/">staying productive</a>.</p>
<p>[^1]: In my experience, it usually only takes about a week for me to look back at my old code and wonder what maniac wrote it and what he could have possibly been thinking</p>
]]></content:encoded>
            <author>
                <name>Ben McCormick</name>
                <email>ben@benmccormick.org</email>
                <link>http://benmccormick.org</link>
            </author>
        </item>
        <item>
            <title><![CDATA[Saving Time With Jest: Meetup Summary]]></title>
            <link>https://benmccormick.org/2016/12/10/saving-time-with-jest/</link>
            <guid>https://benmccormick.org/2016/12/10/saving-time-with-jest/</guid>
            <pubDate>Sat, 10 Dec 2016 05:15:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>This week I gave a talk at the brand new Triangle ReactJS meetup group on how <a href="https://facebook.github.io/jest/">Jest</a> can save developers time.  I was asked afterwards to share the content online for those who missed it.  My talk was mostly demos and wasn’t recorded, so there unfortunately isn’t much to share, but I thought I could write out the basic ideas behind the talk, and share them here.</p>
<h3>What is Jest</h3>
<p>Jest is a JavaScript testing framework built by Facebook to address their internal problems testing JavaScript code.  It was open-sourced in 2014, but unlike Facebook’s other recent high profile JavaScript OSS projects like React, Flux, Relay and GraphQL, it failed to develop much traction in the community and mostly stagnated for 2 years.  That changed in early 2016 when 2 Facebook developers, <a href="https://twitter.com/cpojer">Christoph Pojer</a> and <a href="https://twitter.com/abramov_dmitrii">Dmitrii Abramov</a> began working on improving the project. Over the past year they’ve brought massive improvements to the developer experience of using Jest.</p>
<p>At a more practical level Jest is a test runner with a built in assertion library and support for code coverage, babel transpilation, and module mocking.  It began as a wrapper around <a href="https://jasmine.github.io/">Jasmine</a>, an older JavaScript testing library, but has since replaced parts of Jasmine with replacement functionality, while retaining backwards compatibility.</p>
<h3>How Can Jest Save Me Time?</h3>
<p>Jest saves developers  time in 4 main ways:</p>
<ol>
<li><strong>Setup</strong> - Jest is simple to configure</li>
<li><strong>Writing Tests</strong> - Jest provides a method for writing simple UI tests, and makes it easy to port over existing tests</li>
<li><strong>Running Tests</strong> - Jest runs tests in parallel, doesn’t require a browser, and only runs the tests that are affected by the current code changes</li>
<li><strong>Fixing Tests</strong> - Jest gives great error messages, helps you find the failing code, and has other smaller UX features that make it easy to debug your failing tests quickly.</li>
</ol>
<div>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Tonight <a href="https://twitter.com/ben336">@ben336</a> speaks about using <a href="https://twitter.com/hashtag/jest?src=hash">#jest</a> with <a href="https://twitter.com/hashtag/reactjs?src=hash">#reactjs</a> for your testing needs <a href="https://twitter.com/nestraleigh">@nestraleigh</a> <a href="https://t.co/CAV8wZUwFw">pic.twitter.com/CAV8wZUwFw</a></p>&mdash; Tracy Lee | ladyleet (@ladyleet) <a href="https://twitter.com/ladyleet/status/806655476515618822">December 8, 2016</a></blockquote>
</div>
<h3>Setup</h3>
<p>Setting up Jest is extremely straightforward. Here’s a <code>Hello World</code> React Project</p>
<pre><code class="language-json">//package.json
{
  &quot;name&quot;: &quot;simple_example&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;A minimal jest testing example&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;jest&quot;
  },
  &quot;dependencies&quot;: {
    &quot;react&quot;: &quot;^15.4.1&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;babel-jest&quot;: &quot;^17.0.2&quot;,
    &quot;babel-preset-es2015&quot;: &quot;^6.18.0&quot;,
    &quot;babel-preset-react&quot;: &quot;^6.16.0&quot;,
    &quot;jest&quot;: &quot;^17.0.3&quot;,
    &quot;react-test-renderer&quot;: &quot;^15.4.1&quot;
  }
}
</code></pre>
<p>In package.json we have 4 dependencies that are part of a normal React project setup, <code>react</code>, the 2 babel presets for using <a href="http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/">es2015</a> syntax, and <code>react-test-renderer</code>, which is a react addon for rendering react for testing, similar to how <code>react-dom</code> renders components for the browser.  We then add <code>jest</code> and <code>babel-jest</code>.  <code>jest</code> provides the test runner, assertions API, mocking capabilities, and cli.  <code>babel-jest</code> is a drop-in dependency that lets Jest integrate with Babel.  Neither require any additional configuration in the normal case. Lets say the rest of our project looks like this:</p>
<pre><code class="language-txt">├── __tests__
│   └── simple-component.spec.js
├── package.json
└── simple-component.js
</code></pre>
<pre><code class="language-javascript">// simple-component.js
import React from 'react';

export const SimpleComponent = () =&gt; &lt;div&gt;
    Hello World
&lt;/div&gt;;
</code></pre>
<pre><code class="language-javascript">// __tests__/simple-component.spec.js
import React from 'react';
import renderer from 'react-test-renderer';
import {SimpleComponent} from '../simple-component';

it('shows Hello World', () =&gt; {
  const component = renderer.create( &lt;SimpleComponent/&gt;);
  let componentJSON = component.toJSON();
  expect(componentJSON.children[0]).toBe('Hello World');
});
</code></pre>
<p>Given this project, we only have to run</p>
<pre><code>yarn # or npm install
jest
</code></pre>
<p>and jest will automatically find our test file and run the test.</p>
<img src="http://benmccormick.org/posts/images/jest-hello-world.gif" class="full-width" alt ="gif of running jest">
<h3>Writing Tests</h3>
<p>Jest provides Snapshot Tests, which are a quick way of writing tests to catch changes in the rendered output of a UI component (or any other serializable content).  <a href="http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/">I’ve written about Snapshot testing before</a>, so I won’t go into depth here.  But snapshot tests are significantly faster to write than traditional assertion based tests, and for the write type of code can provide greater or equal benefit.  This is one area where technically Jest may not save you time.  Instead it may take your team to a place where you’re actually willing to write tests for your UI components for the first time.</p>
<p>There are also a great set of codemods for Jest. <a href="https://github.com/skovhus/jest-codemods">jest-codemods</a> can help you take your existing suite of tests from Mocha, Ava, or tape and translate it over to Jest automatically.  Of course if you were using Jasmine previously, your tests can be migrated without changes. So Jest saves you time by not requiring you to rewrite any tests.</p>
<h3>Running Tests</h3>
<p>Jest runs tests fast by default.  While I’ve seen from comments on my last Jest post and elsewhere that some people may have been able to optimize mocha or AVA to be fast enough that switching to Jest was a downgrade, for most people Jest is going to be faster than whatever they may have been using before.  This is true because of performance reasons (tests run in parallel, and mock out timers to avoid unnecessary waiting), but also because of UX decisions.  Jest is able to use git and node’s modules system to detect what files have changed since the last commit, and which tests are affected by that.  Because of that, it is able to optionally run only the tests that might have changed on each run (<code>jest -o</code>).  Since it is usually able to run tests fast as a result (since it only runs a few at a time), Jest also is able to have an awesome watch mode (<code>jest --watch</code>).  In watch mode, tests rerun as files change, and there are options to target specific tests, run all tests, or fix snapshots as you go.</p>
<img src="http://benmccormick.org/posts/images/jest-watch.gif" class="full-width" alt ="gif of running jest --watch">
<h3>Fixing Tests</h3>
<p>Jest provides 4 main conveniences for fixing tests</p>
<ol>
<li>Error messages have clear formatted diffs, making it easy to know the difference between what was received and expected</li>
<li>Error messages have a clear traceback to the line that failed, either the assertion in the test file, or the exception in the source file</li>
<li>Even though tests run in parallel, Jest makes sure that any console output from the test is placed in line with the test output, making it easy to debug with quick console messages</li>
<li>When running Jest multiple times, Jest runs the tests that failed in the previous run prior to other tests, leading to a faster feedback loop even when not using watch mode</li>
</ol>
<img src="http://benmccormick.org/posts/images/jest-error.png" class="full-width" alt ="gif of running jest --watch">
<h3>More Resources</h3>
<ul>
<li>
<p>Another speakup at Wednesday’s meetup has a Jest related blog post out this week.  Nate Hunzaker blogged about <a href="https://www.viget.com/articles/acceptance-testing-react-apps-with-jest-and-nightmare">using Jest with Nightmare.js for acceptance tests</a></p>
</li>
<li>
<p>If you live in the Triangle area (thats Raleigh/Durham, North Carolina to the rest of the world) make sure to check out the <a href="http://www.meetup.com/trianglereact/">Triangle React meetup</a>.  The plan as I understand it is to do events once a month, alternating project nights and talks.  I believe <a href="https://twitter.com/ladyleet">Tracy</a> is looking for more speakers too, so hit her up if you’re interested.  This time 4 of us spoke for 15-20 minutes, so it isn’t as much preparation as other events where you’re the only speaker.</p>
</li>
</ul>
<h3>Subscribe</h3>
<p>Thanks for taking the time to read this post!  JavaScript development is one of the main topics of this blog, so if you enjoyed the post, please consider subscribing by using the <a href="http://feedpress.me/benmccormick">feed</a>, <a href="http://twitter.com/benmccormickorg">Twitter</a> or my <a href="http://eepurl.com/WFYon">mailing list</a>. If you’re excited about Jest, you also might want to check out my <a href="http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/">post on Jest Snapshots</a>.</p>
]]></content:encoded>
            <author>
                <name>Ben McCormick</name>
                <email>ben@benmccormick.org</email>
                <link>http://benmccormick.org</link>
            </author>
        </item>
        <item>
            <title><![CDATA[A whole new site]]></title>
            <link>https://benmccormick.org/2016/12/02/whole-new-site/</link>
            <guid>https://benmccormick.org/2016/12/02/whole-new-site/</guid>
            <pubDate>Fri, 02 Dec 2016 16:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>After 2.5 years of stability, this week I moved <a href="http://benmccormick.org">benmccormick.org</a> to a new platform and overhauled the look and feel. Although most readers have seen the site remain relatively stable, this is actually the 5th major revision of the site since it was first created, so this seems like a good time for a quick trip down memory lane.</p>
<p>I first started it as a Django app, wanting to challenge myself to build a blog.  That was so short-lived that the way-back machine never even registered it, and I don’t have any evidence that it ever existed (thankfully).  In December 2012, I moved the blog over to <a href="http://octopress.org/">Octopress</a> a static site generator based on Ruby.  I started out using a very nice stock template:</p>
<img src="http://benmccormick.org/posts/images/oldsite1.png" class="full-width">
<p>and then shortly switched to a version that I mostly did myself based off of the default octopress theme.  This was one of my first attempts to design anything from scratch, and was not particularly pretty:</p>
<img src="http://benmccormick.org/posts/images/oldsite2.png" class="full-width">
<p>I enjoyed Octopress, but spent a lot of time messing around with it (and struggling through the unfamiliar ruby ecosystem), and not a lot of time writing.  So in the spring of 2014 I decided I wanted to switch to a blogging platform where I could write, rather than messing with code.  So I moved my blog to <a href="https://ghost.org/">Ghost</a>, lightly modified a public theme, and began writing about Vim.  It was around this time (2 years and 40 articles in) that I began to attract more readers, and also began to focus more on higher quality technical articles:</p>
<img src="http://benmccormick.org/posts/images/oldsite3.png" class="full-width">
<p>About a year after that I re-introduced some color to the blog after a prolonged absence. The black and white sidebar was traded for a colorful green, and a I began using a mix of blue and red for text emphasis. I also began to focus on making it more clear how to subscribe to the blog, and highlighted the more popular content:</p>
<img src="http://benmccormick.org/posts/images/oldsite4.png" class="full-width">
<p>Ghost was a great blogging platform, but this fall I decided it was time to move off of it.  I was interested in trying some things that didn’t fit into the platform’s more structured approach, and wanted to move the blog to a place where it was no longer losing me money to run.  So I decided to take another look at the static site generator landscape. I looked through the top 12 or so options on <a href="https://www.staticgen.com/">StaticGen</a> and <a href="https://github.com/gatsbyjs/gatsby">Gatsby</a> quickly stood out.  It uses concepts I’m extremely comfortable with (built with React and Webpack!), produces fast server-rendered SPA style sites, and dictates almost nothing about how the site is built.</p>
<p>The site is now built with Gatsby and hosted on Github pages.  I’ve ditched the noisy green sidebar in favor of a simpler text-focused experience and added a small ad at the top of the page to offset some of the costs associated with the blog.  I’m planning on iterating on the design (better organizing and exposing older content, making it simpler to subscribe to the blog, and making it easier for me to add rich content/code examples to posts without relying on 3rd party services), but for right now I’m excited to get back to focusing on writing.</p>
<img src="http://benmccormick.org/posts/images/current_site.png" class="full-width">
<p>Like all software, as this blog has evolved, I’m sure not all of the progress has been forward.  If you see any issues with the new site, feedback and bugfixes are welcome.  Feel free to hit me up on <a href="https://twitter.com/ben336">twitter</a>, comment on this post, or open an issue on the site’s <a href="https://github.com/benmccormick/benmccormickorg/issues">github repo</a>.  Thank you to everyone who has read and supported this site over the past several years.</p>
<h3>More Resources</h3>
<ul>
<li>If you’re interested in <a href="https://github.com/gatsbyjs/gatsby">Gatsby</a> this post on <a href="https://blog.scottnonnenberg.com/practical-gatsby-js/">Practical Gatsby.js</a> by Scott Nonnenberg is excellent.  Its not a how-to, but more of a series of examples of how he deviated from the base Gatsby blog (and why).  I found it really helpful when brainstorming ideas for this site.</li>
</ul>
<h3>Subscribe</h3>
<p>Thanks for taking the time to read this post!  I’m going to be ramping up posts again this winter, so if you have enjoyed my posts, please consider subscribing by using the <a href="http://benmccormick.org/rss/">feed</a>, <a href="http://twitter.com/benmccormickorg">Twitter</a> or my <a href="http://eepurl.com/WFYon">mailing list</a>. You also might want to check out my <a href="http://benmccormick.org/2016/05/02/digging-into-react-choosing-component-styles/">post on choosing which component styles to use in React</a>.</p>
]]></content:encoded>
            <author>
                <name>Ben McCormick</name>
                <email>ben@benmccormick.org</email>
                <link>http://benmccormick.org</link>
            </author>
        </item>
        <item>
            <title><![CDATA[Testing with Jest Snapshots: First Impressions]]></title>
            <link>https://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/</link>
            <guid>https://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/</guid>
            <pubDate>Mon, 19 Sep 2016 12:41:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Over the past 6 months my team at work has been slowly transitioning a large Backbone application to React.  One of the main goals of the transition has been to build out unit tests as we transition components.  As part of that we switched from using Karma to using Jest for managing our tests.</p>
<p>Our new setup with Jest has several advantages over our previous setup. All Jest tests run through node using a fake DOM implementation.  We don’t need to start up a browser so tests are faster and less flaky [^1].  Jest makes it possible to mock all modules by default [^2], which works well for us since our code base currently contains a large amount of code that is difficult to test for one reason or another.  Jest provides great integration with Babel, which is helpful since all of our Backbone and React code uses ES6 that we transpile for the browser.  Finally Jest provides a wonderful watch mode that runs only the tests that are relevant to the changes you’ve made and makes it easy to see the result.</p>
<p>About a month ago, Jest debuted a new feature: Snapshot testing.  It works a bit differently than a normal unit test.  Instead of executing some code and comparing the output against a value provided by a developer, the first time a test is run, the output passed into the test is saved to a “snapshot file”.  Then when the test is run in the future, the output is compared to the snapshot file.  If the output matches the file, the test passes, if the output is different then the file, the test fails and Jest prints a diff.  We’ve been using Jest snapshots for a few weeks now and I wanted to share my initial impressions.</p>
<h3>What is it like to use a snapshot test ?</h3>
<p>The process for snapshot testing is a bit different than normal tests.  Most snapshot tests look fairly simple.  Something like this example from the <a href="https://github.com/facebook/jest/tree/master/examples/snapshot">Jest repository</a>:</p>
<pre><code class="language-javascript">// Link.react.js
// Copyright 2004-present Facebook. All Rights Reserved.

import React from 'react';

const STATUS = {
  NORMAL: 'normal',
  HOVERED: 'hovered',
};

export default class Link extends React.Component {

  constructor() {
    super();

    this._onMouseEnter = this._onMouseEnter.bind(this);
    this._onMouseLeave = this._onMouseLeave.bind(this);

    this.state = {
      class: STATUS.NORMAL,
    };
  }

  _onMouseEnter() {
    this.setState({class: STATUS.HOVERED});
  }

  _onMouseLeave() {
    this.setState({class: STATUS.NORMAL});
  }

  render() {
    return (
      &lt;a
        className={this.state.class}
        href={this.props.page || '#'}
        onMouseEnter={this._onMouseEnter}
        onMouseLeave={this._onMouseLeave}&gt;
        {this.props.children}
      &lt;/a&gt;
    );
  }

}

// Link.react-test.js  (partial)
// Copyright 2004-present Facebook. All Rights Reserved.
/* eslint-disable no-unused-vars */

'use strict'

import React from 'react';
import Link from '../Link.react';
import renderer from 'react-test-renderer';

it('renders correctly', () =&gt; {
  const tree = renderer.create(
    &lt;Link page=&quot;http://www.facebook.com&quot;&gt;Facebook&lt;/Link&gt;
  ).toJSON();
  expect(tree).toMatchSnapshot();
});

</code></pre>
<p>The first time the test is run, a snapshot file is produced.  In this case, running the previous test produces a snapshot file that looks like this:</p>
<pre><code class="language-javascript">// Link.react-test.js.snap  (partial)
exports[`test renders correctly 1`] = `
&lt;a
  className=&quot;normal&quot;
  href=&quot;http://www.facebook.com&quot;
  onMouseEnter={[Function bound _onMouseEnter]}
  onMouseLeave={[Function bound _onMouseLeave]}&gt;
  Facebook
&lt;/a&gt;
`;
</code></pre>
<p>This gives us a baseline for what we expect the UI to look like.  The snapshot is generated in a folder in your <code>__tests__</code> directory, so that it can be checked into source control.</p>
<p>The next time a test is run, if nothing has changed, the test passes.  However, if we change something (let’s say we add a class), the test fails and shows us a diff.</p>
<pre><code class="language-javascript">// updated link render method

render() {
  return (
    &lt;a
      className={`link-item ${this.state.class}`}
      href={this.props.page || '#'}
      onMouseEnter={this._onMouseEnter}
      onMouseLeave={this._onMouseLeave}&gt;
      {this.props.children}
    &lt;/a&gt;
  );
}
</code></pre>
<pre><code class="language-diff">
# jest output

FAIL  __tests__/Link.react-test.js
 ✕ renders correctly (16ms)

● renders correctly

    Received value does not match the stored snapshot 1.

    - Snapshot
    + Received

      &lt;a
-       className=&quot;normal&quot;
+       className=&quot;link-item normal&quot;
        href=&quot;http://www.facebook.com&quot;
        onMouseEnter={[Function bound _onMouseEnter]}
        onMouseLeave={[Function bound _onMouseLeave]}&gt;
        Facebook
      &lt;/a&gt;

      at Object.&lt;anonymous&gt; (__tests__/Link.react-test.js:14:16)
</code></pre>
<p>We can then choose to accept this change by running <code>jest -u</code> to update the snapshot, or update our code to fix the regression.  If we update the snapshot file, the test will start passing again.</p>
<h3>Snapshot tests are a complement for conventional tests not a replacement</h3>
<p>The first thing that became clear to me while using snapshot testing is that they’re not for everything.  They are optimized for a different case than normal assertion-based tests.</p>
<p>Classic assertion based tests are perfect for testing clearly defined behavior that is expected to remain relatively stable.</p>
<p>Snapshot tests are great for testing less clearly defined behavior that may change often.</p>
<p>Snapshot testing is perfect for things that in the past would have raised concern for “overly brittle” tests that slow development teams down.  The classic example of this (and the main focus of discussion around Jest snapshots so far) is UI testing.</p>
<p>UI components often change in small and trivial ways.  Copy is changed, whitespace is added, a border color is modified. Generally this means that developers have to choose between detailed tests that catch any regression but require constant updates, or less detailed tests that focus on core behaviors but miss smaller regressions.</p>
<p>Snapshot tests provide a new way of approaching these problems in unit tests.  Because they are easy to write and effortless to update, and provide a clear view of what changed after each update, whether it is major or minor.</p>
<p>This isn’t without any disadvantage. Snapshot tests preserve a starting point, but don’t give any indication of developer intent to future developers.  Like any other test, if the initial snapshot passes with bugs, or doesn’t capture the full range of cases, the test won’t adequately cover those behaviors.  But unlike traditional tests, snapshot tests don’t provide specific guidance for what the original developer expected beyond the “actual behavior”.  If there are multiple sub-behaviors that interact to produce output, its not clear which of those are essential, and which are incidental.  That’s not something you want for your critical application logic, especially complicated logic with many subtle cases.  But for UI components and other application elements that are likely to change a lot over time, this is a good set of tradeoffs.</p>
<h3>Snapshot tests are more useful with a healthy code review process</h3>
<p>I’ve pointed out several times now that snapshot tests are easy to update.  One of the downsides of the current design is that they can be almost too easy to update.  When a snapshot test fails, you have the option of modifying the output so that the test passes again, or updating the snapshot to reflect the new output.  Unfortunately, Jest currently provides no granularity for this updating.  Running <code>jest -u</code> to update the snapshots will update all snapshots.  So if  a single change causes many snapshots to break, it can be easy to accidentally update all of them, and possibly difficult to work through the whole diff to find changes.</p>
<p>A robust code review process minimizes these problems.  Because snapshots are checked into source, the diffs in the snapshots are checked into source control.  Viewing diffs in a dedicated code review tool like Github, Bitbucket or Gitlab, it’s easier to see exactly what changed over many files than it might be when updating snapshots from the command line, and if you update a snapshot multiple times in a single branch, you can see the net effect on the snapshot through source control diffs better than you can through Jest.</p>
<h3>Snapshot tests work well with auto-mocking</h3>
<p>Auto-mocking has been one of Jest’s more controversial features.  Prior to version 15, Jest mocked every module used in tests by default.  To run the actual module code, it was necessary to manually unmock each module used or change Jest configurations.  Though it is now disabled by default, auto-mocking actually works very well with snapshot tests.  One problem with tests that rely on generating DOM in React is the fact that most components of any complexity are actually made up of smaller components, that often use external functions with complex logic to determine what to show.  If we fully render everything, changing any of those pieces can break tests for many components, moving us away from the concept of a “unit test”.  If we mock child components and helper functions and then test them individually though, we can focus our tests to only change based on the logic of the individual component being tested.  This is incredibly easy with Jest, and especially helpful in large code bases that don’t have complete test coverage.  Auto-mocking is considered an “advanced feature” of Jest, but it’s not hard to use.  Most mocked modules produce something non-harmful by default, and when its necessary to override, its not difficult to produce something meaningful without getting too involved.  Just add a file with the same name as the file to be mocked into a <code>__mocks__</code> folder in that directory, and give the mocked module the same interface as the mocked component.  You can either write it from scratch or use <a href="http://facebook.github.io/jest/docs/api.html#jest-genmockfrommodule-modulename">jest.genMockFromModule</a> as a starting place.</p>
<h3>Summary</h3>
<p>I’m impressed by Jest snapshots.  When combined with React, they’re providing my first non-frustrating experience unit testing UI components.  I’m excited to use them more going forward, and will be interested to see how they evolve from here.</p>
<hr>
<h3>Extra: A few miscellaneous Jest Thoughts</h3>
<ul>
<li>The UI output from Jest 15 tests is the best I’ve ever seen from a testing framework.  Aside from the nice diffs on snapshots, they do a good job explaining how output differed from expectations in assertion based tests, and communicating context for test failures, warnings and logging messages.  They also give great guidance when making configuration changes:</li>
</ul>
<div style="display:flex; justify-content:center">
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/cpojer">@cpojer</a> This is lovely, thank you! <a href="https://t.co/CX1v11CAVc">pic.twitter.com/CX1v11CAVc</a></p>&mdash; Ben McCormick (@ben336) <a href="https://twitter.com/ben336/status/772906536154894336">September 5, 2016</a></blockquote>
</div>
<ul>
<li>
<p>I’ve also been super impressed with Jest’s watch mode in Jest 15.  <code>--watch</code> makes it easy to focus on a few files or run tests on all files, and stays up to date as you change code.  If you haven’t worked with Jest in a while, the developer experience alone makes it worth trying out.</p>
</li>
<li>
<p>One potential future annoyance with snapshot tests:  The snapshot format can’t be iterated on without breaking all current tests.  Make sure not to mix functional changes with Jest updates!</p>
</li>
</ul>
<div style="display:flex; justify-content:center">
<blockquote class="twitter-tweet" data-cards="hidden" data-lang="en"><p lang="en" dir="ltr">We&#39;ll update the snapshot format sometimes in minor/major releases. When updating Jest, please update snapshots<br><br>See <a href="https://t.co/gPE63dMz8P">https://t.co/gPE63dMz8P</a></p>&mdash; Christoph Pojer (@cpojer) <a href="https://twitter.com/cpojer/status/776623521069805568">September 16, 2016</a></blockquote>
</div>
<h3>More Resources</h3>
<ul>
<li>
<p>Randy Coulman has a <a href="http://randycoulman.com/blog/2016/09/06/snapshot-testing-use-with-care/">nice article</a> on some of the reasons to be careful about embracing snapshot testing.  He makes good points about the requirement of human involvement in verifying a change in time-crunched situations and also the potential value of snapshot tests for legacy code.</p>
</li>
<li>
<p>My team uses a mix of <a href="https://github.com/airbnb/enzyme">enzyme</a> and snapshot tests for unit testing React Components.  <a href="https://github.com/trayio/enzyme-to-json?utm_content=buffer6b78b&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">This repo</a> combines them, allowing you to use enzyme to generate the snapshot output to diff against rather than the renderer provided by Jest. I personally haven’t felt the need to integrate these two tools, but if your team uses enzyme and wants consistency/fewer (used) dependencies, this could be a cool option.</p>
</li>
<li>
<p>Finally here’s <a href="https://blog.grommet.io/post/2016/09/01/how-we-landed-on-jest-snapshot-testing-for-javascript">another article</a> on how Snapshot testing convinced one team to migrate to Jest from Tape</p>
</li>
</ul>
<h3>Subscribe</h3>
<p>Thanks for taking the time to read this post!  JavaScript development is one of the main topics of this blog, so if you enjoyed the post, please consider subscribing by using the <a href="http://feedpress.me/benmccormick">feed</a>, <a href="http://twitter.com/benmccormickorg">Twitter</a> or my <a href="http://eepurl.com/WFYon">mailing list</a>. You also might want to check out my <a href="http://benmccormick.org/2016/05/02/digging-into-react-choosing-component-styles/">post on choosing which component styles to use in React</a>.</p>
<p>[^1]: PhantomJS was a tremendous source of pain in our Karma setup.
[^2]: This used to be the default setting, with Jest 15 it can be configured to work that way.</p>
]]></content:encoded>
            <author>
                <name>Ben McCormick</name>
                <email>ben@benmccormick.org</email>
                <link>http://benmccormick.org</link>
            </author>
        </item>
        <item>
            <title><![CDATA[Quick Tip: Take advantage of lodash collections]]></title>
            <link>https://benmccormick.org/2016/06/26/quick-tip-take-advantage-of-lodash-collections-2/</link>
            <guid>https://benmccormick.org/2016/06/26/quick-tip-take-advantage-of-lodash-collections-2/</guid>
            <pubDate>Sun, 26 Jun 2016 21:27:55 GMT</pubDate>
            <content:encoded><![CDATA[<p>One of the more frustrating things about using JavaScript in the browser is the number of different collection types that you need to deal with.  When using native APIs and 3rd party libraries, it’s easy to encounter 3 or more different types of collections, including <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList">NodeLists</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection">HTMLCollections</a>, <a href="https://learn.jquery.com/using-jquery-core/jquery-object/">jQuery Objects</a>, and plain arrays.</p>
<pre><code class="language-javascript">let a = document.querySelectorAll('div')
a instanceOf NodeList //true

let b = document.getElementsByTagName('div')
b instanceOf HTMLCollection //true

let c = $('div')
c instanceOf jQuery // true

let d = ['button1', 'button2', 'button3'].map(id =&gt; document.getElementById(id));
d instance of Array //true
</code></pre>
<p>This ends up mattering in practice because not every function that is available on Array is available on NodeList, HTMLCollections, and jQuery objects.</p>
<pre><code class="language-javascript">let ids = document.querySelectorAll('div').map(el =&gt; el.id)
// Uncaught TypeError: document.querySelectorAll(...).map is not a function

ids = document.getElementsByTagName('div').map(el =&gt; el.id)
// Uncaught TypeError: document.getElementsByTagName(...).map is not a function

let numDivs = $('div').reduce((count, el) =&gt; count + 1, 0);
// Uncaught TypeError: $(...).reduce is not a function
</code></pre>
<p>Since we can’t use native array methods on these alternate collections, we end up having to be very careful about knowing where we’ve retrieved data from, and how to convert those collections or how to work around their limitations.</p>
<p>It’s useful to know about these distinctions, but in practice dealing with them is a pain.  One of the nice properties of <a href="https://lodash.com/docs">lodash</a> is that it abstracts over these incompatibilities.</p>
<pre><code class="language-javascript">let ids = _.map(document.querySelectorAll('div'), el =&gt; el.id);
// ['container', 'left-box', 'right-box']

ids = _.map(document.getElementssByTagName('div'), el =&gt; el.id);
// ['container', 'left-box', 'right-box']

let numDivs = _.reduce($('div'), (count, el) =&gt; count + 1, 0));
// 3
</code></pre>
<p>For methods that iterate over a collection lodash treats all array-like objects (essentially anything with a length property) the same and iterates over their numerical properties from 0 to length-1.  This provides a nice consistency when working with DOM APIs and removes the mental overhead from managing their inconsistencies.</p>
<h3>Subscribe</h3>
<p>Thanks for taking the time to read this post!   JavaScript development is one of the main topics of this blog, so if you enjoyed the post, please consider subscribing by using the <a href="http://feedpress.me/benmccormick">feed</a>, <a href="http://twitter.com/benmccormickorg">Twitter</a> or my <a href="http://eepurl.com/WFYon">mailing list</a>. You also might want to check out my post <a href="http://benmccormick.org/2014/11/12/underscore-vs-lodash/">comparing lodash and underscore</a>.  I’m also going to be starting a new series of posts soon diving into lodash more in depth.</p>
]]></content:encoded>
            <author>
                <name>Ben McCormick</name>
                <email>ben@benmccormick.org</email>
                <link>http://benmccormick.org</link>
            </author>
        </item>
        <item>
            <title><![CDATA[What are mutable and immutable data structures?]]></title>
            <link>https://benmccormick.org/2016/06/04/what-are-mutable-and-immutable-data-structures-2/</link>
            <guid>https://benmccormick.org/2016/06/04/what-are-mutable-and-immutable-data-structures-2/</guid>
            <pubDate>Sat, 04 Jun 2016 21:52:52 GMT</pubDate>
            <content:encoded><![CDATA[<p>Sometimes concepts and ideas slowly grow in a programming community, sometimes they seem to appear in a flash.  For the first several years I wrote JavaScript, I don’t recall ever seeing anything written online about immutable data.  Since React hit the scene in the last 2 years however, articles mentioning mutable and immutable data seem to have multiplied, as have libraries like Immutable.js and alternate front end languages like Elm that allow users to “use immutable data”.  I’m not going to address those libraries, but thought it would be useful to throw out a quick primer on what immutable data actually is, how it differs from mutable data, and why anyone cares.</p>
<p>A mutable object is an object whose state can be modified after it is created.  An immutable object is an object whose state cannot be modified after it is created.  Examples of native JavaScript values that are immutable are numbers and strings.  Examples of native JavaScript values that are mutable include objects, arrays, functions, classes, sets, and maps.</p>
<h3>Implications of mutable object</h3>
<p>So why does this matter?  Consider the following code examples:</p>
<pre><code class="language-javascript">let a = {
    foo: 'bar'
};

let b = a;

a.foo = 'test';

console.log(b.foo); // test
console.log(a === b) // true
</code></pre>
<pre><code class="language-javascript">let a = 'test';
let b = a;
a = a.substring(2);

console.log(a) //st
console.log(b) //test
console.log(a === b) //false
</code></pre>
<pre><code class="language-javascript">let a = ['foo', 'bar'];
let b = a;

a.push('baz')

console.log(b); // ['foo', 'bar', 'baz']
console.log(a === b) // true
</code></pre>
<pre><code class="language-javascript">let a = 1;
let b = a;
a++;

console.log(a) //2
console.log(b) //1
console.log(a === b) //false
</code></pre>
<p>What we see is that for mutable values, updating state applies across all <em>references</em> to that variable.  So changing a value in one place, changes it for all references to that object.  For the immutable data types, we have no way of changing the internal state of the data, so the reference always gets reassigned to a new object.  The biggest implication of this is that for immutable data, equality is more reliable since we know that a value’s state won’t be changed out from under us.</p>
<p>Finally, its worth noting that it’s still possible to treat JavaScript objects as immutable.  This can first be done through <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze</a>, which shallowly renders a JavaScript object immutable.  But it can also be done with programmer discipline.  If we want to rely on object’s being immutable, it’s possible to enforce that all object updates are done through something like
<code>Object.assign(a, {foo: 'bar'})</code> rather than <code>a.foo = 'bar'</code>, and all array updates are done through functions that generate new arrays like <code>Array.prototype.map</code>, <code>Array.prototype.filter</code>, or <code>Array.prototype.concat</code>, rather than mutating methods like <code>Array.prototype.push</code>, <code>Array.prototye.pop</code>, or <code>Array.prototype.sort</code>.  This is less reliable without language level constraints, but has become popular in the React ecosystem for dealing with data for folks who don’t want to introduce abstractions like Immutable.js.</p>
<h3>Subscribe</h3>
<p>Thanks for taking the time to read this post!  JavaScript development is one of the main topics of this blog, so if you enjoyed the post, please consider subscribing by using the <a href="http://feedpress.me/benmccormick">feed</a>, <a href="http://twitter.com/benmccormickorg">Twitter</a> or my <a href="http://eepurl.com/WFYon">mailing list</a>. You also might want to check out my post on <a href="http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/">explaining the different version names of the JavaScript language</a>.</p>
]]></content:encoded>
            <author>
                <name>Ben McCormick</name>
                <email>ben@benmccormick.org</email>
                <link>http://benmccormick.org</link>
            </author>
        </item>
        <item>
            <title><![CDATA[Digging Into React: Choosing Component Styles]]></title>
            <link>https://benmccormick.org/2016/05/02/digging-into-react-choosing-component-styles/</link>
            <guid>https://benmccormick.org/2016/05/02/digging-into-react-choosing-component-styles/</guid>
            <pubDate>Mon, 02 May 2016 02:32:36 GMT</pubDate>
            <content:encoded><![CDATA[<p>Over the past month I’ve been building my first production features using React.  One of the first things I’ve noticed is the amount of choices that come into a new React project.  A lot of this is about the ecosystem around React (Webpack vs Browserify? Redux vs Relay? Do I need CSS modules or Immutable.js?) but many of the choices are just part of the library, figuring out the best, or at least a consistent, way to do things.</p>
<p>One such choice is the syntax for defining components that you choose to use.  In React, you can define components in at least 3 different styles: the React.createClass style, the ES6 class style, and the pure functional style [^1]. Each has some advantages and disadvantages.</p>
<h3>React.createClass</h3>
<p>React.createClass is the original style for defining React components, and is still the preferred style in the React documentation.</p>
<p>Here’s what a theoretical SaveButton component looks like in this style.  It is a simple component that listens for clicks and then uses a separate dispatcher object to send a request to save the data on the page.  After saving the button will either show some specified saved text or “Saved”.</p>
<pre><code class="language-javascript">import React from ‘react’;
import {dispatcher} from ‘./lib/dispatcher’;

export const SaveButton = React.createClass({

    propTypes: {
        //text to show after the component is saved
        savedText: React.PropTypes.string.isRequired,
        //primary text to show on the button
        text: React.PropTypes.string.isRequired,
    },

    getDefaultProps() {
        return {
             savedText: ‘Saved’,
        };
    },

    getInitialState() {
        return { saved: false };
    },

    save() {
        dispatcher.sendMessage(‘saveData’);
        this.setState({saved: true});
    },

    render() {
        let {text, savedText} = this.props;
        return (&lt;span className=“button” onClick={this.save}&gt;
           {this.state.saved ? savedText : text}
        &lt;/span&gt;);
    },
});
</code></pre>
<p>One of the best things about this style is its cohesive nature.  Everything about the component is described as a single object passed to React.createClass.  Since it is just an object that React processes, it is also able to accommodate more usage styles than ES6 classes and functional components.  Specifically we can use <a href="https://facebook.github.io/react/docs/reusable-components.html#mixins">mixins</a> and add declarative properties like propTypes directly to the component definition.</p>
<p>The downside of the createClass approach is the custom nature of it.  External tools can’t inspect a component declaration and know what functions and methods will be available on the final component without either some deep inspection of the React source code or pre-existing knowledge of React.createClass that somebody has to document and maintain.</p>
<h3>ES6 Classes</h3>
<p>Last March, with React v0.13, the React team introduced a second syntax for React components using ES6 classes.  The constraints of the ES6 class definition change the component API in a few ways.  With ES6 classes there is no way to add properties to the class property as part of the main definition, they need to be added afterwards [^2].  Some niceties that are possible with React.createClass don’t work with ES6 classes as well.  Mixins aren’t possible, and React will no longer “autobind” your functions to the component instance, so when passing class methods as callbacks in your components it is necessary to bind it to the current context, either by using arrow functions like
<code>&lt;span onClick= {() =&gt; this.save()} &gt;</code> or by binding the function like <code>this.save = this.save.bind(this)</code>.</p>
<pre><code class="language-javascript">import React from ‘react’;
import {dispatcher} from ‘./lib/dispatcher’;

export class SaveButton extends React.Component {

    constructor(props) {
        super(props);
        this.state = { saved: false };
    }

    save() {
        dispatcher.sendMessage(‘saveData’);
        this.setState({saved: true});
    },

    render() {
        let {text, savedText} = this.props;
        return (&lt;span className=“button” onClick={() =&gt;this.save()}&gt;
           {this.state.saved ? savedText : text}
        &lt;/span&gt;);
    },
});

SaveButton.propTypes = {
    //text to show after the component is saved
    savedText: React.PropTypes.string.isRequired,
    //primary text to show on the button
    text: React.PropTypes.string.isRequired,
};

SaveButton.defaultProps = {
    savedText: ‘Saved’,
};
</code></pre>
<p>While this approach makes some syntactic compromises and loses mixins, it has the advantage of standardization and tooling support.  A good JavaScript tool can easily tell that a SaveButton should have render and save methods, as well as detecting the methods it inherits from React.Component.  This is useful for things like auto-complete and linting, as well as (theoretically) run-time performance.</p>
<h3>Pure Functional Components</h3>
<p>Last fall with React 0.14, React added a 3rd component style.  Functional components dispose of many of the secondary features of React, and focus on the <code>render</code> function.  They are the least powerful of all the component syntaxes.  In addition to losing mixins, pure functional components don’t have the life-cycle functions of the class based syntaxes and also don’t have any internal state.  For these components, all state must be managed externally through something like Redux, or parent components that do have state.</p>
<pre><code class="language-javascript">import React from ‘react’;
import {dispatcher} from ‘./lib/dispatcher’;

export const SaveButton = ({text, savedText, isSaved, setSaved}) =&gt; {
    const save = () =&gt;{
        dispatcher.sendMessage(‘saveData’);
        setSaved();
    },
    return (&lt;span className=“button” onClick={save}&gt;
       {isSaved ? savedText : text}
    &lt;/span&gt;);
};

SaveButton.propTypes = {
    //text to show after the component is saved
    savedText: React.PropTypes.string.isRequired,
    //primary text to show on the button
    text: React.PropTypes.string.isRequired,
    // has the data already been saved?
    isSaved: React.PropTypes.bool.isRequired,
    // a function to update the application state and mark the page as saved
    setSaved: React.PropTypes.func.isRequired,
};

SaveButton.defaultProps = {
    savedText: ‘Saved’,
};
</code></pre>
<p>Despite being the least powerful of the 3 component styles, functional components do have some advantages.  First of all, they’re very simple.  It is easy to see what is going on with them, and easy for React to optimize for them.  Like ES6 classes, they’re easy to understand for 3rd party tools since they’re “just functions”, and easy to explain to new developers for the same reason.  They also work well with systems like Redux which already encourages pulling state out of components into global stores.</p>
<h2>Choosing a component style</h2>
<p>So given these 3 styles, how do you choose which style to use for a component?  Balance a desire for consistency with a respect for the <a href="https://en.wikipedia.org/wiki/Rule_of_least_power">Principle of Least Power</a>.</p>
<p>For consistency purposes, don’t use more than 2 of these styles within a single project.  This mostly breaks down to “don’t use createClass and ES6 classes” together in the same project.  There are significant differences in capability and complexity between the first 2 styles and functional components. But the class based styles are similar enough that using both adds complexity but fails to do much in terms of signaling intent.  Switching between 2 different styles of communicating a concept should also indicate a meaningful difference in intent.</p>
<p>Of course the most consistent approach would be to always use createClass, since it is the most powerful and any component that can be implemented in the other 2 styles can be implemented using createClass.  This is where the principle of least power comes in.  Here is Tim Berners-Lee’s initial description of that principle:</p>
<blockquote>
<p>Computer Science in the 1960s to 80s spent a lot of effort making languages which were as powerful as possible. Nowadays we have to appreciate the reasons for picking not the most powerful solution but the least powerful. The reason for this is that the less powerful the language, the more you can do with the data stored in that language. If you write it in a simple declarative from, anyone can write a program to analyze it in many ways. The Semantic Web is an attempt, largely, to map large quantities of existing data onto a common language so that the data can be analyzed in ways never dreamed of by its creators. If, for example, a web page with weather data has RDF describing that data, a user can retrieve it as a table, perhaps average it, plot it, deduce things from it in combination with other information. At the other end of the scale is the weather information portrayed by the cunning Java applet. While this might allow a very cool user interface, it cannot be analyzed at all. The search engine finding the page will have no idea of what the data is or what it is about. This the only way to find out what a Java applet means is to set it running in front of a person.</p>
</blockquote>
<p>The less powerful react components styles are the more readable styles, both for humans and computers. That readability also limits the classes of errors and unexpected behaviors we can enact. So we should strive for simple components where we can, while balancing that with our desire for consistency.</p>
<p>For projects looking into this, there are a few simple questions that you can answer to decide which style to use.</p>
<ol>
<li>Do you need to integrate with non-React libraries that modify the DOM?</li>
<li>Do you need to manage state within your components (IE are you not using an external state management library like Redux)?</li>
<li>Do you need to use mixins for anything in your project?</li>
</ol>
<p>If you answered yes to any of these questions, then you need to include a class based component style in your options for your projects.  If you answered yes to #3, then you will need to use React.createClass.</p>
<p>Once you’ve made those decisions at the project level, the decisions are easy for an individual component.  If you answered no to all of the questions above (unlikely for a large project, but possible), you should always use functional components.  If not, you can ask the same 3 questions for each new component.  If the answer to all of the questions are no for a component, use a functional component, otherwise use the class based style you’ve chosen for your project.</p>
<h3>More Resources</h3>
<ul>
<li><a href="https://facebook.github.io/react/docs/reusable-components.html#es6-classes">The React documentation</a> is the best place to look at the benefits and tradeoffs of the different component styles</li>
<li><a href="http://jamesknelson.com/should-i-use-react-createclass-es6-classes-or-stateless-functional-components/">James Nelson wrote a similar guide last year</a> focused on the decision tree of what style to use for a component.  He dismisses the createClass style completely and has a similar but slightly different set of questions to ask.</li>
<li><a href="https://github.com/facebook/react/issues/5677">This github thread</a> makes the important distinction that functional components are not yet optimized in any special way, though they may be in the future.</li>
</ul>
<h3>Subscribe</h3>
<p>Thanks for taking the time to read this post!  JavaScript development is one of the main topics of this blog, so if you enjoyed the post, please consider subscribing by using the <a href="http://feedpress.me/benmccormick">feed</a>, <a href="http://twitter.com/benmccormickorg">Twitter</a> or my <a href="http://eepurl.com/WFYon">mailing list</a>. You also might want to check out my post on <a href="http://benmccormick.org/2016/01/08/reusable-code-patterns/">reusable code patterns</a>.</p>
<p>[^1]: Technically you can also use an ES5 class based style, but I’m going to ignore that.  It is not a common idiom for React programs as far as I can tell.</p>
<p>[^2]: There is a proposal for adding static properties to ES6 classes, but it is still in early stages right now and is not guaranteed to end up as part of the ECMAScript spec.</p>
]]></content:encoded>
            <author>
                <name>Ben McCormick</name>
                <email>ben@benmccormick.org</email>
                <link>http://benmccormick.org</link>
            </author>
        </item>
        <item>
            <title><![CDATA[Ack Tips]]></title>
            <link>https://benmccormick.org/2016/04/30/ack-tips/</link>
            <guid>https://benmccormick.org/2016/04/30/ack-tips/</guid>
            <pubDate>Sat, 30 Apr 2016 15:48:25 GMT</pubDate>
            <content:encoded><![CDATA[<p><em>Last summer I briefly considered creating a separate blog focused on command line tools.  The idea is that the articles would be shorter and more practical than the longer pieces I write here.  I ended up scrapping the idea, but had written a few posts on one of my favorite command line tools Ack, so I wanted to preserve them here, as a single, longer piece, separated into 3 “tips”</em></p>
<h3>#1: Prefer ack or ag to grep</h3>
<p><a href="http://linux.die.net/man/1/grep">grep</a> is one of the most well known unix utilties.  If you’ve had any exposure to the command line at all, you’ve probably searched for something using grep.  grep’s standalone use is searching for content inside of files, but with Unix’s piping philosophy it is useful as a general search and filtering tool.  Originally created for Version 4 Unix 42 years ago, it has been a staple of *Nix operating systems ever since.   If you’ve been using it for even half that time, I’m sure a blog post isn’t enough to convince you to stop.  But for the rest of us, there’s an opportunity to do better.</p>
<p><a href="http://beyondgrep.com/">ack</a> and <a href="https://github.com/ggreer/the_silver_searcher">ag</a> <sup id="fnref:1"><a href="#fn:1">1</a></sup> are similar projects with the same goal: providing a better experience than grep when searching directories of files, particularly for programmers.  The key selling points:</p>
<ol>
<li>Improved speed when searching through directories</li>
<li>Ignores version control and binary files by default when searching</li>
<li>Easy filtering by file-type</li>
<li>A cleaner API for searching directories, without adding complexity to the single file case</li>
</ol>
<p>This is easiest to see by comparing commands.</p>
<h4>Searching for “javascript” in a file</h4>
<pre><code>grep javascript foo.txt
</code></pre>
<pre><code>ack javascript foo.txt
</code></pre>
<h4>Searching every file in the current directory for “javascript”</h4>
<pre><code>grep -r javascript .
</code></pre>
<pre><code>ack javascript
</code></pre>
<h4>Searching every file in the current directory for “javascript”, excluding a .git directory</h4>
<pre><code>grep -r javascript . $(find . -type f | grep -v '\.git')
</code></pre>
<pre><code>ack javascript
</code></pre>
<h4>Searching every HTML file in the current directory for “javascript”, excluding a .git directory</h4>
<pre><code>grep -r javascript . $(find . -name '*.html' -or -name '*.htm'| grep -v '\.git')
</code></pre>
<pre><code>ack --html javascript
</code></pre>
<p>Basically, as the complexity of what you’re trying to do increases in terms of multiple files, the overhead of using grep increases proportionately.  Because ack and ag are optimized for common use cases, they’re able to scale much better.</p>
<h3>#2: Use Ack to get familiar with a new codebase</h3>
<p><a href="http://beyondgrep.com/">ack</a> is an incredibly useful tool when approaching a new codebase, especially if you’re focused on a specific feature. It allows you to quickly get a view of the codebase, and then zero in on the functionality you’re interested in.  To see how this works, let’s use jQuery’s <a href="https://github.com/jquery/jquery">source repo</a> as an example, and see what happens if we want to get a look at how it implements ajax.</p>
<pre><code class="language-bash">❯ git clone git@github.com:jquery/jquery.git
❯ cd jquery
</code></pre>
<p>We can start by trying to get a general idea of the size of the codebase.  Running <code>ack -f</code> to show all files in the directory will immediately overrun our terminal, so we can get a file count using <code>wc</code> instead</p>
<pre><code class="language-bash">❯ ack -f |wc -l
    249
</code></pre>
<p>Ok thats a good amount of files.  But how many of them are actually source files?  We can filter down to just the javascript files.</p>
<pre><code class="language-bash">❯ ack -f --js |wc -l
    155
</code></pre>
<p>But thats probably still a bit high, since not all of the JavaScript files are source files.  A quick <code>ls</code> shows that we probably want to filter down to the src directory.</p>
<pre><code class="language-bash">❯ ack -f --js src |wc -l
    92
</code></pre>
<p>Ok so now we’re down to 92 source files.  Still a bit much, but its probably worth printing them with <code>ack -f --js src</code> at this point to get an idea of the directory structure.  When we do that, we can see there’s an ajax folder, which is probably what we’re interested in.  To make sure we’re not missing related files, we can continue on to searching for files with ajax in the file name directly.</p>
<pre><code class="language-bash">❯ ack -g --js ajax src
    src/ajax/jsonp.js
    src/ajax/load.js
    src/ajax/parseJSON.js
    src/ajax/parseXML.js
    src/ajax/script.js
    src/ajax/var/location.js
    src/ajax/var/nonce.js
    src/ajax/var/rquery.js
    src/ajax/xhr.js
    src/ajax.js
    src/event/ajax.js
</code></pre>
<p>That gets us down to 11 files to look at.  But we might be getting a bit greedy.  Not every file related to ajax may have ajax in the file path.  We can use the <code>-l</code> option of ack to display the list of files that contain ajax somewhere in their text.</p>
<pre><code class="language-bash">❯ ack --js -l ajax src
    src/ajax/jsonp.js
    src/ajax/load.js
    src/ajax/script.js
    src/ajax/xhr.js
    src/ajax.js
    src/event/ajax.js
    src/jquery.js
    src/manipulation/_evalUrl.js
    src/serialize.js
</code></pre>
<p>Ok that adds 3 additional files with ajax references.  But its not clear that they’re relevant to jQuery’s ajax implementation, it may just be a file reference or comment.  Lets use ack to get a quick look at how ajax is referenced in those files.  This part gets a bit more complicated.  We can use ack’s <code>-v</code> option to invert our matching and find non-matching inputs, then use unix piping to filter our previous command.</p>
<pre><code class="language-bash">❯ ack --js -l ajax src |ack -v ajax
    src/jquery.js
    src/manipulation/_evalUrl.js
    src/serialize.js
</code></pre>
<p>Now we can use ack’s <code>-x</code> argument to search the files piped in through standard input.</p>
<pre><code>❯ ack --js -l ajax src |ack -v ajax|ack -x ajax

    src/jquery.js
    20:     &quot;./ajax&quot;,
    21:     &quot;./ajax/xhr&quot;,
    22:     &quot;./ajax/script&quot;,
    23:     &quot;./ajax/jsonp&quot;,
    24:     &quot;./ajax/load&quot;,
    25:     &quot;./event/ajax&quot;,

    src/manipulation/_evalUrl.js
    2:      &quot;../ajax&quot;
    6:      return jQuery.ajax({
    9:              // Make this explicit, since user can override this through ajaxSetup (#11264)

    src/serialize.js
    61:             traditional = jQuery.ajaxSettings &amp;&amp; jQuery.ajaxSettings.traditional;
</code></pre>
<p>So we can see pretty quickly that these files are safe to ignore in terms of understanding how ajax works in jQuery.  They’re just module loads, an actual call to the ajax method for other purposes, and settings serialization. It is useful to note that <code>src/ajax</code> is loaded into the main jQuery file first. Its probably worth looking at it as the starting point for our investigation. We’re well on our way to diving into the ajax functionality, able to focus on 11 of the 249 files in the repo immediately, already knowing how those files are loaded into the main library.</p>
<p>This was just a simple example.  Whenever you’re spelunking into new code territory, consider using ack to get your bearings.  Things go a lot faster when you know the lay of the land in advance.</p>
<h3>#3: Take advantage of Ack’s configurability</h3>
<p>One of the nice things about <a href="http://beyondgrep.com/">ack</a> is the fact that it takes an <code>.ackrc</code> configuration file <sup id="fnref:2"><a href="#fn:2">2</a></sup>. These files can be scoped at a directory level, a user level or at a root level, and mirror the options available on the executable itself.  This allows you to extend and customize acks behavior in 3 primary ways.</p>
<h4>a. Add new filetypes, and bundle existing ones</h4>
<p>One of ack’s most useful features is the ability to add a <code>--&lt;filetype&gt;</code> flag to your searches to restrict your searches to a specific filetype.   ack comes with 75 builtin types including almost all common languages.  But those aren’t always good enough.  To handle obscure languages, and not so obscure syntaxes like handlebars templates, ack lets you define new filetypes.  You’re also able to modify existing filetypes to add additional file extensions to include under that filetype.  So for instance my ackrc includes these lines:</p>
<pre><code>--type-add
hbs=hbs
--type-add
js=js,es6
</code></pre>
<p>The first 2 lines allow me to specifically search handlebars files, which are where all of the html content for my work projects is stored.  The next 2 lines include es6 files in my JavaScript searches, useful since I append JavaScript files that I intend to process with <a href="https://babeljs.io/">Babel</a> with the <code>.es6</code> extenstion.  Customizing the js extension allows me to search all of my JavaScript together.  You can also define richer types in ackrc <a href="http://beyondgrep.com/documentation/ack-2.14-man.html#defining_your_own_types">based on file names using regular expressions or direct name matching</a>.</p>
<h4>b. Set default options</h4>
<p>Any option that the ack executable takes can have a default set or changed in an ackrc file.  This is mainly useful for the display option.  By default ack groups matches from different files and gives the file information above each group of matches.  It also shows all output in color.  Any of those things can be disabled or changed in your ackrc file.</p>
<h4>c. Exclude unwanted directories or files</h4>
<p>Oftentimes there are a predictable group of files that you may want to ignore in searches.  Perhaps you have a build directory that mirrors your source code, or documentation files mingled with your source.  You can put <code>--ignore-directory</code> or <code>--ignore-file</code>.  Ignore directory takes a directory name, while ignore-file takes matches in the same format as the custom filetypes mentioned above.</p>
<p>If you’re starting to use ack, don’t miss the chance to make your searches even more efficient by removing any rough edges with an <code>.ackrc</code>.</p>
<h4>Installation Instructions</h4>
<ul>
<li><a href="http://beyondgrep.com/install/">ack</a></li>
<li><a href="https://github.com/ggreer/the_silver_searcher#installing">ag</a></li>
</ul>
<h3>Subscribe</h3>
<p>Thanks for taking the time to read this post!  Using tools efficiently is one of the main topics of this blog, so if you enjoyed the post, please consider subscribing by using the <a href="http://feedpress.me/benmccormick">feed</a>, <a href="http://twitter.com/benmccormickorg">Twitter</a> or my <a href="http://eepurl.com/WFYon">mailing list</a>. You also might want to check out my articles on <a href="http://benmccormick.org/learning-vim-in-2014/">Vim</a>.</p>
<div class="footnotes">
<ol>
    <li class="footnote" id="fn:1">
    <p>
       ack came first; ag was created as a faster version of ack.  ack is written in perl, making it more portable, and has a few more configuration options.  ag is written in C and is generally faster.  Your choice may vary depending on your use case.
    </p>
    <a href="#fnref:1" title="return to article"> ↩</a>
    </li>
    <li class="footnote" id="fn:2">
        <p>
       This is also one of the main traits that separates ack from <a href="https://github.com/ggreer/the_silver_searcher">ag</a>.
        </p>
        <a href="#fnref:2" title="return to article"> ↩</a></p>
    </li>
</ol>
</div>
]]></content:encoded>
            <author>
                <name>Ben McCormick</name>
                <email>ben@benmccormick.org</email>
                <link>http://benmccormick.org</link>
            </author>
        </item>
        <item>
            <title><![CDATA[Stability vs Decline]]></title>
            <link>https://benmccormick.org/2016/03/09/stability-vs-decline/</link>
            <guid>https://benmccormick.org/2016/03/09/stability-vs-decline/</guid>
            <pubDate>Wed, 09 Mar 2016 06:04:39 GMT</pubDate>
            <content:encoded><![CDATA[<p>My post on <a href="http://benmccormick.org/2016/03/07/the-sad-state-of-the-backbone-ecosystem/">the sad state of the Backbone ecosystem</a> from this weekend was surprisingly popular.  I got a lot of responses pointing out <a href="https://twitter.com/ben336/status/707063566940016645">some things I got wrong</a>, sharing my concerns, or pushing back on my main points.  Objections to the post came in 2 primary forms, which I want to quickly address.  The first concern is that the Backbone ecosystem doesn’t matter. The second concern is that the trend I’m identifying as decline and decay is actually stability.</p>
<h3>Does Backbone’s ecosystem matter?</h3>
<p>The first concern came in 2 main forms.  The first (and more polite) form was from commenters who shared their experience and said that they’d found Backbone’s core to be enough when combined with their own code.  The second group was a generalization of that, effectively saying that Backbone is a minimal framework, and <strong>real programmers</strong> can write their own code on top of that.  I’m sympathetic to the first framing, much less so to the second.</p>
<p>One of the beauties of Backbone is that it can be used in a variety of ways.  Its small and simple enough that you can pull it in and use only part of it (maybe just the models or event system for instance), but it has been scaled to be used for large web applications like Trello, Rdio, Backbone, Bitbucket and others. Some of those use cases quite frankly, don’t need anything else most of the time.  If you’re writing a very simple single screen piece of interactive behavior with Backbone, you don’t need any special extra libraries for that.</p>
<p>I personally work on a large scale web application (~200 Backbone Views) that has been developed for over 3 years and will continue to be developed (hopefully) for a long time. In that situation, having well documented, tested and supported third party libraries for common tasks like rich tables, form validation, UI component libraries, and integrations with other tools is tremendously useful.  As an experienced developer, I’m capable of writing all of these things myself, but doing so takes time, and the result is likely to be less stable, less well documented, and less well thought through than a popular open source solution.  To be clear, nobody is obligated to write these things for me.  I’m merely making a factual statement that the experience of writing a large web application in Backbone becomes more difficult as the community around the library shrinks.</p>
<p>There’s a second reason why down playing the importance of an ecosystem is harmful though.  I’ve said that I am capable of writing the various components of an ecosystem myself.  But that’s only true of me because I have years of experience writing code, and specifically of working with different libraries that gave me ideas on how those problems should be tackled.  A community that says you should be able to do everything yourself without starting places and good examples is a community that is hostile to beginners.  Let’s not let the JavaScript community be that.</p>
<h3>Is Backbone just stable?</h3>
<p>The second disagreement (and the most common theme on <a href="https://news.ycombinator.com/item?id=11237283">Hacker News</a>) was that the current state of Backbone and its ecosystem is not sad at all.  Backbone is stable, and thats something to be celebrated.  In some cases this echoed what I actually said in the post.  I specifically called out the core Backbone library as a good example of stable software:</p>
<blockquote>
<p>I’m starting with Backbone itself to give an idea what a stable mature project graph looks like. Backbone isn’t getting the activity it used to, but there’s still a steady flow of bug fixes and documentation updates, and issues are being worked through.</p>
</blockquote>
<p>Backbone is stable, and in a vacuum that is something to be happy about.  Stability has not prevented it from having an active team of contributors who are continuing to refine it and make small improvements.  This is great, and on it’s own would make me incredibly pleased as a user.  The problem comes with the libraries around it.  Excepting Marionette, which appears to be getting ready to launch their long awaited version 3, activity in the ecosystem has stagnated in a different way than Backbone core.</p>
<p>Unlike Backbone core, secondary libraries have important issues requested by several people being ignored.  I’ve chosen to avoid calling out specific projects because I don’t think anyone has a responsibility to fix other people’s open source problems and don’t want to add to open source guilt.  But it is not hard to find examples of this if you browse through popular Backbone packages on Github.</p>
<p>Unlike Backbone core, secondary libraries sometimes have no clear active maintainer who can be counted on to put out a release in the case of an emergency change being needed.  This matters because Backbone and JavaScript libraries in general live on an unstable platform.  Browsers change all the time.  While they do their best to maintain backwards compatibility, browsers occasionally introduce bugs, and occasionally fix bugs that a library may have been relying on or working around. In addition to disaster scenarios like that, tools change and best practices change over time.  When documentation stagnates and doesn’t keep up with changes, libraries become less useful and approachable over time.  Most Backbone tutorials on the web, and the documentation for many libraries, assume that scripts will be loaded in directly and that variables will be referenced through namespacing.  In a world where module loaders are becoming a default tool for larger JavaScript applications, thats a gap that makes libraries hard to learn, or teaches out of date practices to less experienced developers.</p>
<p>A healthy stable project ought to be able to check off 3 boxes.</p>
<ol>
<li>
<p>It meets the goals of its authors</p>
</li>
<li>
<p>Major bugs are fixed as they’re reported.</p>
</li>
<li>
<p>It is maintained to the extent that as new issues come in, they are responded to and dealt with</p>
</li>
</ol>
<p>That definition could mean that a library handles a single use cases, and there is rare activity because nobody ever encounters any problems.  But for larger projects, this likely means refinements to fix small issues, documentation changes, and an occasional big bugfix over time. Its these things that make the difference between stable software and abandonware.</p>
<h3>What does it matter in the end?</h3>
<p>I didn’t write my original post to say that Backbone is dead.  I wanted to highlight a way in which the experience of using it has declined over time.  It is specifically a way that makes using Backbone harder for me.  I’m grateful to the many people who have built Backbone and the ecosystem around it, and think it is still a very useful tool.  This ecosystem issue does make me unlikely to recommend Backbone for folks who are building web applications “at scale”.  I think Ember or possibly React are better choices for that.  For small one off projects, and for content focused sites that need as little JavaScript as possible while still providing a rich experience, Backbone is a great choice.</p>
<h3>Subscribe</h3>
<p>Thanks for taking the time to read this post!  JavaScript development is one of the main topics of this blog, so if you enjoyed the post, please consider subscribing by using the <a href="http://feedpress.me/benmccormick">feed</a>, <a href="http://twitter.com/benmccormickorg">Twitter</a> or my <a href="http://eepurl.com/WFYon">mailing list</a>. If you’re interested in Backbone you also might want to check out my <a href="http://benmccormick.org/marionette-explained/">series on Marionette.js</a>, or my post on <a href="http://benmccormick.org/2015/09/09/what-can-backbone-developers-learn-from-react/">what Backbone developers can learn from React</a>.</p>
]]></content:encoded>
            <author>
                <name>Ben McCormick</name>
                <email>ben@benmccormick.org</email>
                <link>http://benmccormick.org</link>
            </author>
        </item>
    </channel>
</rss>